write.csv(forecast.price,
file=paste0('C:\\Users\\fou-f\\Documents\\GitHub\\Tesina\\Estancia observatorio econometrico\\Pronostico\\Pronostico_Resumen\\FooTesting\\resultados\\',
'pronostico_metricas_desempenio_mes_', month((mes.last)), ' anio_', year((mes.last)), 'numero_de_meses_pronostico_', length.fore,' region ', gsub('\\.', '_', region),
'.csv'))
save(forecast.price,
file=paste0('C:\\Users\\fou-f\\Documents\\GitHub\\Tesina\\Estancia observatorio econometrico\\Pronostico\\Pronostico_Resumen\\FooTesting\\Binarios\\',
'pronostico_metricas_desempenio_mes_', month((mes.last)), ' anio_', year((mes.last)), 'numero_de_meses_pronostico_', length.fore,' region ', gsub('\\.', '_', region),
'.rdata'))
save(forecast.mean,
file=paste0('C:\\Users\\fou-f\\Documents\\GitHub\\Tesina\\Estancia observatorio econometrico\\Pronostico\\Pronostico_Resumen\\FooTesting\\Binarios\\',
'pronostico_intervalosConfi_mes_', month((mes.last)), ' anio_', year((mes.last)), 'numero_de_meses_pronostico_', length.fore,' region ', gsub('\\.', '_', region),
'.rdata'))
source('~/Documents/GitHub/Tesina/Estancia observatorio econometrico/Pronostico/Pronostico_Resumen/Codigo/modelo_auto.r', echo=TRUE)
#--------------------------------------
print(c(region))
print(mes.last)
RESULT <- INFLACION(price=precios, costos=costos, demanda=demanda,
monetario=monetario, region=region, variable=variable,
mes.first=mes.first, mes.last=mes.last,
length.fore=length.fore, lag.max=lag.max,
c.sig=c.sig, show.data=show.data, seas.max=seas.max,
length.test=length.test, n.try=n.try, restrict=restrict,
objective=objective, ec.det=ec.det)
#--------------------------------------
last <- which(rownames(precios)==mes.last)
real <- precios[(last):(last+length.fore),index]
forecast <- c(precios[last,index],RESULT[[2]][1:length.fore,1])
linf <-  RESULT[[2]][1:length.fore,2]
lsup <-  RESULT[[2]][1:length.fore,3]
precision <- (1 - abs(real-forecast)/real)
precios_tasa_interanual <- precios[(last-length.fore):last,index]
tasa_interanual <- (forecast/precios_tasa_interanual -1)*100
precios_tasa_mensual <- c(precios[(last-1):last,index], forecast[1:length.fore-1])
tasa_mensual <- (forecast/precios_tasa_mensual -1)*100
mes.format <- as.Date(mes.last, format = "%d/%m/%Y")
mes_pronostico <-as.character(seq(as.Date(mes.format),by = "month", length = length.fore+1))
pronostico_regional <-cbind(pronostico_regional, forecast)
pronostico_tasa_mensual <-cbind(pronostico_tasa_mensual, tasa_mensual)
pronostico_tasa_mensual
pronostico_tasa_interanual <- cbind(pronostico_tasa_interanual, tasa_interanual)
View(pronostico_tasa_interanual)
View(pronostico_tasa_mensual)
#--------------------------------------
# ARCHIVANDO RESULTADOS
#--------------------------------------
mes.format <- sub("-01", "", mes.format)
colnames(pronostico) <- c("FECHA", "INPC","Tasa Mensual","Tasa Interanual")
write.csv(pronostico, paste0(dt.file, "FooTesting\\resultados_boletin\\",mes.format,"\\Pronostico_", gsub('\\.', '_', region),"_",mes.format,".csv"),row.names = F)
pronostico_regional[,1] <- mes_pronostico
colnames(pronostico_regional) <- c("FECHA", gsub('\\.', '_', region))
colnames(pronostico_regional)
pronostico_regional <- matrix(NA, nrow=length.fore+1)
pronostico_tasa_mensual <- matrix(NA, nrow=length.fore+1)
pronostico_tasa_interanual <- matrix(NA, nrow=length.fore+1)
region <- regiones[index]
#--------------------------------------
# OUTPUT
#--------------------------------------
pronostico <- matrix(NA, nrow=length.fore+1)
#--------------------------------------
last <- which(rownames(precios)==mes.last)
real <- precios[(last):(last+length.fore),index]
forecast <- c(precios[last,index],RESULT[[2]][1:length.fore,1])
linf <-  RESULT[[2]][1:length.fore,2]
lsup <-  RESULT[[2]][1:length.fore,3]
precision <- (1 - abs(real-forecast)/real)
precios_tasa_interanual <- precios[(last-length.fore):last,index]
tasa_interanual <- (forecast/precios_tasa_interanual -1)*100
precios_tasa_mensual <- c(precios[(last-1):last,index], forecast[1:length.fore-1])
tasa_mensual <- (forecast/precios_tasa_mensual -1)*100
mes.format <- as.Date(mes.last, format = "%d/%m/%Y")
mes_pronostico <-as.character(seq(as.Date(mes.format),by = "month", length = length.fore+1))
pronostico <- cbind(mes_pronostico, forecast, tasa_mensual, tasa_interanual)
View(pronostico)
pronostico_regional <-cbind(pronostico_regional, forecast)
pronostico_tasa_mensual <-cbind(pronostico_tasa_mensual, tasa_mensual)
pronostico_tasa_interanual <- cbind(pronostico_tasa_interanual, tasa_interanual)
View(pronostico_regional)
pronostico_regional[,1] <- mes_pronostico
colnames(pronostico_regional) <- c("FECHA", gsub('\\.', '_', region))
write.csv(pronostico_regional, paste0(dt.file, "FooTesting\\resultados_boletin\\",mes.format,"\\Pronostico_Regional_",mes.format,".csv"),row.names = F)
mes.format
write.csv(pronostico, paste0(dt.file, "FooTesting\\resultados_boletin\\",mes.format,"\\Pronostico_", gsub('\\.', '_', region),"_",mes.format,".csv"),row.names = F)
mes.format
year(mes.format)
25000-4063.35
20000-2978.54
4255*20
16*11
3966/16*11
3966/(16*11)
16*11*11
11*12+2
16*11(11*12+2)
16*11*(11*12+2)
16*11*12
16*12
3696/192
(12*12+2-24)*4*4*11
12*12+2-24
122*4*4*11
122*4*4
122*4*4*2
122*4*4
122*4*4*2
12*4
12*4*122
11*4*122
9*4*122
8*4*122
2**5*5*23
11*15
165/60
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, cache=TRUE,
warnings = FALSE,
message=FALSE,
fig.height=3.5, fig.width=7)
# Chunk 2: barras
load(file = 'cervezasFiltro.rdata')
load( file = 'catalogoCervezas.rdata') #catalogo con los detalles SOLO de las cervezas
library(dplyr)
#names(catalogo.cervezas)
index <- grep('[pP]ack', catalogo.cervezas$SUBSEGMENTO_DES)
catalogo.cervezas$Categoria <- 'Individual'
catalogo.cervezas$Categoria[index] <- 'Pack'
catalogo.util <- catalogo.cervezas[, c('PRODUCTO_KEY', 'PRODUCTO_DES', 'SUBSEGMENTO_DES', 'Categoria' )]
sku.remove <- c('10034321','10074735','10047930', '10057271','10048582',
'54146584' , '54146586', '54150830', '54150844', '54157852', '10017307')
catalogo.util %>% filter(!(PRODUCTO_KEY %in% sku.remove))-> catalogo.util
remove(catalogo.cervezas)
gc()
Sys.sleep(5)
####
#names(cervezas)
library(lubridate)
cervezas %>% group_by(id_producto, mday(id_fecha)) %>%
summarise(cantidad=sum(cantidad),
montomargen=sum(montomargen)) -> temp
temp <- merge(temp, catalogo.util,
all.x=TRUE, by.x='id_producto', by.y='PRODUCTO_KEY')
names(temp)[2] <- 'Dia_mes'
temp%>% group_by(Categoria, Dia_mes)%>%
summarise(cantidad=sum(cantidad),
montomargen=sum(montomargen)) -> temp
library(ggplot2)
var <- c('Individual', 'Pack')
colores <- c('#E8001A', '#FBB208')
index <- 1
ggplot(subset(temp, Categoria==var[index]), aes(x= Dia_mes, y=cantidad, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día del mes')+ ylab('Unidades vendidas')+
scale_y_continuous(labels = scales::comma)
index <- 2
ggplot(subset(temp, Categoria==var[index]),
aes(x= Dia_mes, y=cantidad, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día del mes')+ ylab('Unidades vendidas')+
scale_y_continuous(labels =scales::comma)
# graficos de montos
index <- 1
ggplot(subset(temp, Categoria==var[index]), aes(x= Dia_mes, y=montomargen, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día del mes')+ ylab('Margen de venta ')+
scale_y_continuous(labels = scales::dollar)
index <- 2
ggplot(subset(temp, Categoria==var[index]),
aes(x= Dia_mes, y=montomargen, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día del mes')+ ylab('Margen de venta')+
scale_y_continuous(labels =scales::dollar)
###################
# graficos día de la semana
cervezas %>% group_by(id_producto, wday(id_fecha, label=TRUE)) %>%
summarise(cantidad=sum(cantidad),
montomargen=sum(montomargen)) -> temp
temp <- merge(temp, catalogo.util,
all.x=TRUE, by.x='id_producto', by.y='PRODUCTO_KEY')
names(temp)[2] <- 'Dia_semana'
levels(temp$Dia_semana) <- c('Domingo', 'Lunes', 'Martes',
'Miercoles', 'Jueves',
'Viernes', 'Sabado')
temp%>% group_by(Categoria, Dia_semana)%>%
summarise(cantidad=sum(cantidad),
montomargen=sum(montomargen)) -> temp
index <- 1
ggplot(subset(temp, Categoria==var[index]), aes(x= Dia_semana, y=cantidad, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día de la semana')+ ylab('Unidades vendidas')+
scale_y_continuous(labels = scales::comma)
index <- 2
ggplot(subset(temp, Categoria==var[index]),
aes(x= Dia_semana, y=cantidad, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día de la semana')+ ylab('Unidades vendidas')+
scale_y_continuous(labels =scales::comma)
# montos por dia de la semana
index <- 1
ggplot(subset(temp, Categoria==var[index]), aes(x= Dia_semana, y=montomargen, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día de la semana')+ ylab('Margen de venta')+
scale_y_continuous(labels = scales::dollar)
index <- 2
ggplot(subset(temp, Categoria==var[index]),
aes(x= Dia_semana, y=cantidad, fill=I(colores[index]))) +
geom_col()+
ggtitle(paste0('Ventas de categoria ', var[index]))+
theme_minimal()+ xlab('Día de la semana')+ ylab('Margen de venta')+
scale_y_continuous(labels =scales::dollar)
# Chunk 3: series_sd
#mejor hago una tabla con toda la info
cervezas <- merge(cervezas, catalogo.util, all.x=TRUE,
by.x='id_producto',
by.y='PRODUCTO_KEY')
cervezas$id_producto <- cervezas$monto <-
cervezas$SUBSEGMENTO_DES <- NULL
gc()
Sys.sleep(10)
119*4*24
(119-24)*4*24
4*4*16
(119-24)*4*
4
(119-24)*4*6
(119-24)*4*8
(119-24)*4*9
(119-24)*4*10
(119-24)*4*11
48*11*4
48*11*6
48*11*
7
484/48
48*24
119*23*4
(119-48)*23*4
2*
2
23*4
23*24
23*24*6
23*24*11
.7*150
150-105
73+22
library(plotly)
load("~/Documents/GitHub/Tesina/Estancia observatorio econometrico/Pronostico/Pronostico_Resumen/FooTesting/Binarios/pronostico_fecha_corteMes_ 1 anio_2017numero_de_meses_pronostico_3 region Centro_norte.rdata")
p
plot(p)
View(p)
12600/4
300/20
9+7
13+7
cars
names(cars)
300/21.9
(300/21.9)*3
41*.4
16.4*21.97
10:13+
7
20:30-7
20.30-7
490.57*2
450-71
50*21
shiny::runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
shiny::runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
shiny::runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
runApp('Documents/GitHub/MCE2/4/coloquioAcatlan/TalleR/TalleR')
shiny::runApp('Documents/GitHub/ColoquioAcatlan2/TalleR')
runApp('Documents/GitHub/ColoquioAcatlan2/TalleR')
900-40
860/21.88
50.91/896.7
shiny::runApp('Documents/GitHub/Tesina/Estancia observatorio econometrico/Pronostico/Pronostico_Resumen/AppObservatorioPronostico')
#--------------------------------------
# Actualizacion 14 marzo de 2019. Antonio-
# Cambio de rango max() por min()
#--------------------------------------
{
remove(list=ls())
t.inicio <- Sys.time()
library(pls)
library(lubridate)
library(vars)
library(forecast)
library(ks)
dt.file <-"C:\\Users\\fou-f\\Documents\\GitHub\\DashboardOEWindows\\Pronostico\\FooTestingMax\\"
source(paste(dt.file, "CodigoMax\\model_functions.r", sep =""))
source(paste(dt.file, "CodigoMax\\inflacionTasaCambioMax.r", sep =""))
#---------------------------------------
# DATOS
#---------------------------------------
#cuidamos de que la lectura no incluya nulos para el futuro desarrollo con la API
#monetario <- read.csv(paste(dt.file, "FooTesting/TasaCambio/tasa_cambio/datos/Monetario.csv", sep = ""), row.names = 1)
monetario <- read.csv(paste(dt.file, "/Econ.DataMax/Monetario.csv", sep = ""), row.names = 1)
row.names(monetario) <- as.character(dmy(row.names(monetario)))
#monetario <- read.csv(paste(dt.file, "FooTesting/TasaCambio/tasa_cambio/datos/Monetario.csv", sep = ""), row.names = 1)
monetario <- read.csv(paste(dt.file, "/Econ.DataMax/Monetario.csv", sep = ""), row.names = 1)
row.names(monetario) <- as.character(dmy(row.names(monetario)))
#costos <- read.csv(paste(dt.file, "FooTesting/TasaCambio/tasa_cambio/datos/Costos.csv", sep = ""), row.names = 1)
costos <- read.csv(paste(dt.file, "/Econ.DataMax/Costos.csv", sep = ""), row.names = 1)
row.names(costos) <- as.character(dmy(row.names(costos)))
#demanda <- read.csv(paste(dt.file, "FooTesting/TasaCambio/tasa_cambio/datos/Demanda.csv", sep = ""), row.names = 1)
demanda <- read.csv(paste(dt.file, "/Econ.DataMax/Demanda.csv", sep = ""), row.names = 1)
row.names(demanda) <- as.character(dmy(row.names(demanda)))
precios <- read.csv(paste(dt.file, "/TasaCambioMax/tasa_cambioMax/datosMax/Tasa.csv", sep = ""), row.names = 1)
#precios <- read.csv(paste(dt.file, "FooTestingMax/Econ.DataMax/Precios.csv", sep = ""), row.names = 1)
row.names(precios) <- as.character(dmy(row.names(precios)))
precios.row <- precios
###>> aqui tendremos que hacegurar que las series comiencen en el mismo punto
#costos <- na.omit(costos)
#monetario <- na.omit(costos)
#demanda <- na.omit(demanda)
#precios <- na.omit(precios)
#---------------------------------------
# PARAMETROS
#---------------------------------------
}
{
# borrar para Tipo de cambio
#regiones <- c("Frontera.norte", "Noroeste", "Noreste", "Centro.norte",
#            "Centro.sur", "Sur", "Mexico", "Nacional")
regiones <- 'Tipo.de.cambio'
variable <- "Tipo.de.cambio"
c.sig <- 0.10      # Nivel de significancia
show.data <- 48    # ventana de tiempo
length.test <- 6    # Meses a probar  intramuestra
n.try <- 6         # Rezagos a probar
restrict <- FALSE  # TRUE Si pronostico no puede superar (min,max)
objective <- 3     # Lo usa en el bias - Ahora el objetivo de BM es 3
lag.max <- 12    # Para el numero de modelos
seas.max <- 12    # Para el numero de modelos
anual <- 12             # Para tasa interanual >> lo aÃ±adio Andres
ec.det <- c("none", "const", "trend")
anio.parser <- c(paste0('0',1:9), 10:12)
names(anio.parser) <- c('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio',
'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre')
anio.loop <- as.character(2017:2018) # consideremos despues parelizar esto
n.try <- 6         # Rezagos a probar
#length.fore # Num. de meses a pronosticar
}
length.fore <- 6
# length.fore <- 6
print(paste0('mes < pronostico ', length.fore))
for( anio.shiny in anio.loop[1])
{
}
print(paste0('anio: ', anio.shiny))
mes.first <- dmy("01/01/2005")
mes.last <- dmy(paste0('01/', mes.shiny, '/', anio.shiny))
mes.format <- as.Date(mes.last, format = "%d/%m/%Y")
dir.create(paste0(dt.file,'resultados_boletinMax/', mes.format, '/'))
setwd(paste0(dt.file,'resultados_boletinMax/', mes.format))
#------------------------------------------
# LOOP sobre las regiones
#------------------------------------------
{
pronostico_regional <- as.data.frame(matrix(NA, nrow=length.fore+1))
pronostico_tasa_mensual <- as.data.frame(matrix(NA, nrow=length.fore+1))
pronostico_tasa_interanual <- as.data.frame(matrix(NA, nrow=length.fore+1))
}
shiny::runApp('Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
runApp('Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
shiny::runApp('Documents/GitHub/DashboardOEWindows/Pronostico/AppObservatorioPronostico')
shiny::runApp('Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
34000*1.16
install.packages("PCAmixdata")
library(PCAmixdata)
data(wine)
View(wine)
str(wine)
X.quanti <- splitmix(wine)$X.quanti
X.quali <- splitmix(wine)$X.quali
View(X.quali)
pca<-PCAmix(X.quanti[,1:27],X.quali,ndim=4)
pca<-PCAmix(X.quanti[,1:27],X.quali,ndim=4,graph=FALSE)
pca$eig
pca$ind$coord
################
library(smacof)
data(trading)
View(trading)
trading
res <- mds(trading, ndim = 3, type = "ordinal", ties = "secondary")
res
plot(res)
############
data(decathlon)
View(decathlon)
res.pca <- PCA(decathlon, quanti.sup = 11:12, quali.sup=13)
install.packages("FactoMineR")
############
library(FactoMineR)
############
library(FactoMineR)
data(decathlon)
res.pca <- PCA(decathlon, quanti.sup = 11:12, quali.sup=13)
## plot of the eigenvalues
## barplot(res.pca$eig[,1],main="Eigenvalues",names.arg=1:nrow(res.pca$eig))
summary(res.pca)
plot(res.pca,choix="ind",habillage=13)
dimdesc(res.pca, axes = 1:2)
## To draw ellipses around the categories of the 13th variable (which is categorical)
plotellipses(res.pca,13)
## Example with missing data
## use package missMDA
## Not run:
require(missMDA)
data(orange)
nb <- estim_ncpPCA(orange,ncp.min=0,ncp.max=5,method.cv="Kfold",nbsim=50)
imputed <- imputePCA(orange,ncp=nb$ncp)
res.pca <- PCA(imputed$completeObs)
shiny::runApp('Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
runApp('Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
setwd("~/Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax")
dir()
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
library(plotly)
library(ggplot2)
library(markdown)
library(DT)
library(lubridate)
#mapa#
library(leaflet)
library(geoR)
library(sp)
library(rgdal)
# mapa regional
mex <- readOGR(dsn="/Mapa/MapaSHP")
getwd()
# mapa regional
mex <- readOGR(dsn="/Mapa/MapaSHP/")
# mapa regional
mex <- readOGR(dsn="\\Mapa\\MapaSHP")
dir()
# mapa regional
mex <- readOGR(dsn="\\Mapa\\MapaSHP")
runApp()
# mapa regional
mex <- readOGR(dsn="/Mapa/MapaSHP")
# mapa regional
mex <- readOGR(dsn="/Mapa/MapaSHP/")
getwd()
# mapa regional
mex <- readOGR(dsn="\Mapa\MapaSHP/mexico_regiones.shp")
# mapa regional
mex <- readOGR(dsn="\\Mapa\\MapaSHP\\mexico_regiones.shp")
# mapa regional
mex <- readOGR(dsn="\\Mapa\\MapaSHP\\")
library(geoR)
library(sp)
library(rgdal)
## parametros
#args <- commandArgs(TRUE)
#length.fore = args[1]
length.fore <- 1
#mes.last = args[2]
mes.last <- 1
anio <- 2017
### datos de INPC regional
dt.file <- '~/Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/CodigoMax/Mapa'
setwd('~/Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/CodigoMax/Mapa')
if(nchar(as.character(mes.last)) == 1)
mes.last <- paste0('0',mes.last)
mes.last <- as.character(mes.last)
anio <- as.character(anio)
pronosticos_regional <- read.csv(paste0(dt.file,'/', length.fore,"/",
anio, '-',
mes.last,"/Pronostico_Tasa_Interanual_",
anio, '-',
mes.last, '.csv'), row.names = 1)
### Mapa vectorial (test, se debe mejorar contorno)
mex <- readOGR(dsn="MapaSHP")
getwd()
# mapa regional
mex <- readOGR(dsn="MapaSHP")
mex@data$Nombre <- c("Frontera.norte", "Noroeste", "Noreste", "Centro.norte",
"Centro.sur", "Sur", "Mexico")
runApp('~/Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax')
setwd("~/Documents/GitHub/DashboardOEWindows/Pronostico/FooTestingMax/AppObservatorioPronosticoMax")
# mapa regional
mex <- readOGR(dsn="MapaSHP")
mex@data$Nombre <- c("Frontera.norte", "Noroeste", "Noreste", "Centro.norte",
"Centro.sur", "Sur", "Mexico")
epsg2163 <- leafletCRS(
crsClass = "L.Proj.CRS",
code = "WGS84",
proj4def = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
resolutions = 0:6)
pronosticos_regional <- read.csv(paste0('/Mapa/', input$inpcReginitanio,"/",
input$inpcReginitanio, '-',
input$inpcReginitmes,"/Pronostico_Tasa_Interanual_",
input$inpcReginitanio, '-',
input$inpcReginitmes, '.csv'), row.names = 1)
runApp()
shiny::runApp()
runApp()
